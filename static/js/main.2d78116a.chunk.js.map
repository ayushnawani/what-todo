{"version":3,"sources":["assets/pushup.jpg","assets/jogging.png","assets/chinup.jpg","assets/paneer.jpg","assets/pasta.jpeg","assets/pizza.jpg","assets/burger.jpg","assets/fruitsalad.jpg","assets/coffee.jpg","assets/bored.jpg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","dataSet","exercise","name","description","level","img","require","cooking","App","useState","todo","setTodo","className","onSubmit","event","preventDefault","data","FormData","target","console","log","entries","todoSet","key","list","push","length","index","max","min","Math","floor","random","randomNumber","matched","label","map","type","defaultChecked","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8KAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,qGCIrCC,G,MAOF,CACFC,SAAU,CACR,CACEC,KAAM,8BACNC,YAAa,8BACbC,MAAO,EACPC,IAAKC,EAAQ,KAEf,CACEJ,KAAM,iCACNC,YAAa,iCACbC,MAAO,EACPC,IAAKC,EAAQ,KAEf,CACEJ,KAAM,gBACNC,YAAa,eACbC,MAAO,EACPC,IAAKC,EAAQ,MAGjBC,QAAS,CACP,CACEL,KAAM,yBACNC,YAAa,8BACbC,MAAO,EACPC,IAAKC,EAAQ,KAEf,CACEJ,KAAM,wBACNC,YAAa,8BACbC,MAAO,EACPC,IAAKC,EAAQ,KAEf,CACEJ,KAAM,eACNC,YAAa,8BACbC,MAAO,EACPC,IAAKC,EAAQ,KAEf,CACEJ,KAAM,gBACNC,YAAa,8BACbC,MAAO,EACPC,IAAKC,EAAQ,KAEf,CACEJ,KAAM,mBACNC,YAAa,8BACbC,MAAO,EACPC,IAAKC,EAAQ,KAEf,CACEJ,KAAM,sBACNC,YAAa,8BACbC,MAAO,EACPC,IAAKC,EAAQ,QAwFJE,MA/Ef,WAAgB,IAAD,EACWC,mBAKrB,CACDP,KAAM,qEACNC,YAAa,GACbC,MAAO,EACPC,IAAKC,EAAQ,MAVF,mBACNI,EADM,KACAC,EADA,KAkCb,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,2CAWJ,0BAAMC,SApCV,SAAsBC,GACpBA,EAAMC,iBACN,IAAMC,EAAO,IAAIC,SAASH,EAAMI,QAChCC,QAAQC,IAAI,uBAAwBJ,EAAKK,WACzC,IAJyD,EAInDC,EAAU,GAJyC,cAKvCN,EAAKK,WALkC,IAKzD,2BAAkC,CAAC,IAAzBE,EAAwB,0BAC1BC,EAAOxB,EAAQuB,GACrBD,EAAQG,KAAR,MAAAH,EAAO,YAASE,KAPuC,8BAUzD,GAAIF,EAAQI,OAAS,EAAG,CACtB,IAAMC,EA5BZ,SAAsBC,GAAuB,IAAVC,EAAS,uDAAH,EACvC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMC,GAAOA,GA2B9BI,CAAaX,EAAQI,QACnCP,QAAQC,IAAI,wBAAyBO,GACrC,IAAMO,EAAUZ,EAAQK,GACxBR,QAAQC,IAAI,0BAA2Bc,GAEvCvB,EAAQuB,MAqBL,CACC,CAAEhC,KAAM,UAAWiC,MAAO,WAC1B,CAAEjC,KAAM,WAAYiC,MAAO,aAC3BC,KAAI,gBAAGlC,EAAH,EAAGA,KAAMiC,EAAT,EAASA,MAAT,OACJ,yBAAKvB,UAAU,yBACb,2BACEA,UAAU,mBACVyB,KAAK,WACLnC,KAAMA,EACNoC,gBAAc,IAEhB,2BAAO1B,UAAU,oBAAoBuB,OAIzC,4BAAQvB,UAAU,kBAAkByB,KAAK,UAAzC,uBAIF,yBAAKzB,UAAU,YACb,yBAAKA,UAAU,OACb,4BAAKF,EAAKR,MACV,yBAAKU,UAAU,yBAAyB2B,IAAK7B,EAAKL,IAAKmC,IAAI,YCxIjDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.2d78116a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pushup.2da68930.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jogging.9844d220.png\";","module.exports = __webpack_public_path__ + \"static/media/chinup.71401916.jpg\";","module.exports = __webpack_public_path__ + \"static/media/paneer.5e86ffca.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pasta.e6899736.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/pizza.cf317a06.jpg\";","module.exports = __webpack_public_path__ + \"static/media/burger.45879320.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fruitsalad.57def8c3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/coffee.fd0dc752.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bored.274fcec9.jpg\";","import React, { ChangeEvent, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst dataSet: {\n  [key: string]: Array<{\n    name: string;\n    description: string;\n    level: number;\n    img: string;\n  }>;\n} = {\n  exercise: [\n    {\n      name: 'Do 20 Pushups in 60 seconds',\n      description: 'Do 20 Pushups in 10 seconds',\n      level: 1,\n      img: require('./assets/pushup.jpg'),\n    },\n    {\n      name: 'Do Jogging for 5 mins non stop',\n      description: 'Do Jogging for 5 mins non stop',\n      level: 1,\n      img: require('./assets/jogging.png'),\n    },\n    {\n      name: 'Do 5 Chin-Ups',\n      description: 'Do 5 ChinUps',\n      level: 1,\n      img: require('./assets/chinup.jpg'),\n    },\n  ],\n  cooking: [\n    {\n      name: 'Cook Panner in 30 mins',\n      description: 'Do 20 Pushups in 60 seconds',\n      level: 1,\n      img: require('./assets/paneer.jpg'),\n    },\n    {\n      name: 'Cook Pasta in 20 mins',\n      description: 'Do 20 Pushups in 10 seconds',\n      level: 1,\n      img: require('./assets/pasta.jpeg'),\n    },\n    {\n      name: 'Make a Pizza',\n      description: 'Do 20 Pushups in 10 seconds',\n      level: 1,\n      img: require('./assets/pizza.jpg'),\n    },\n    {\n      name: 'Make a Burger',\n      description: 'Do 20 Pushups in 10 seconds',\n      level: 1,\n      img: require('./assets/burger.jpg'),\n    },\n    {\n      name: 'Make Fruit Salad',\n      description: 'Do 20 Pushups in 10 seconds',\n      level: 1,\n      img: require('./assets/fruitsalad.jpg'),\n    },\n    {\n      name: 'Make dalgona coffee',\n      description: 'Do 20 Pushups in 10 seconds',\n      level: 1,\n      img: require('./assets/coffee.jpg'),\n    },\n  ],\n};\n\nfunction randomNumber(max: number, min = 0) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction App() {\n  const [todo, setTodo] = useState<{\n    name: string;\n    description: string;\n    level: number;\n    img: string;\n  }>({\n    name: 'Feeling Bored? Select your category and click \"Get my random task\"',\n    description: '',\n    level: 1,\n    img: require('./assets/bored.jpg'),\n  });\n\n  function handleSubmit(event: ChangeEvent<HTMLFormElement>) {\n    event.preventDefault();\n    const data = new FormData(event.target);\n    console.log('handleSubmit -> data', data.entries());\n    const todoSet = [];\n    for (let [key] of data.entries()) {\n      const list = dataSet[key];\n      todoSet.push(...list);\n    }\n\n    if (todoSet.length > 0) {\n      const index = randomNumber(todoSet.length);\n      console.log('handleSubmit -> index', index);\n      const matched = todoSet[index];\n      console.log('handleSubmit -> matched', matched);\n      // if (matched) {\n      setTodo(matched);\n      // }\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <h1>What Todo</h1>\n        </div>\n      </div>\n      {/* How to write select */}\n      {/* <select id=\"files\" value=\"4\">\n        <option value=\"1\">1</option>\n        <option value=\"2\">2</option>\n        <option value=\"3\">3</option>\n        <option value=\"4\">4</option>\n      </select> */}\n\n      <form onSubmit={handleSubmit}>\n        {[\n          { name: 'cooking', label: 'Cooking' },\n          { name: 'exercise', label: 'Exercise' },\n        ].map(({ name, label }) => (\n          <div className=\"form-group form-check\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              name={name}\n              defaultChecked\n            />\n            <label className=\"form-check-label\">{label}</label>\n          </div>\n        ))}\n\n        <button className=\"btn btn-primary\" type=\"submit\">\n          Get my random task\n        </button>\n      </form>\n      <div className=\"row task\">\n        <div className=\"col\">\n          <h4>{todo.name}</h4>\n          <img className=\"img-thumbnail task-img\" src={todo.img} alt=\"img\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}